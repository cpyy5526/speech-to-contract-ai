user youngchan;

worker_processes  1;

events {
    worker_connections  1024;
}

http {
    lua_need_request_body on;
    client_body_buffer_size 10M;

    error_log logs/error.log debug;
    access_log logs/access.log;

    server {
        listen 8080;
        server_name localhost;

        client_max_body_size 25M;

        # 확장자 포함된 URL 처리
        location ~ ^/upload/audio/(?<uuid>[a-zA-Z0-9\-]+)\.(?<ext>[a-z0-9]+)$ {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'PUT, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            if ($request_method = OPTIONS) {
                return 204;
            }

            content_by_lua_block {
                ngx.req.read_body()
                local uuid = ngx.var.uuid
                local ext = ngx.var.ext
                ngx.log(ngx.ERR, "[upload] UUID: ", uuid, ", EXT: ", ext)

                local data = ngx.req.get_body_data()
                if not data then
                    local body_file = ngx.req.get_body_file()
                    ngx.log(ngx.ERR, "[upload] body_data is nil, fallback to body_file: ", tostring(body_file))
                    if body_file then
                        local file = io.open(body_file, "rb")
                        if file then
                            data = file:read("*a")
                            file:close()
                        else
                            ngx.log(ngx.ERR, "[upload] failed to open body_file: ", body_file)
                        end
                    end
                end

                if not data then
                    ngx.status = 400
                    ngx.say("Invalid or missing body data")
                    ngx.log(ngx.ERR, "[upload] No data received")
                    return
                end

                if #data > 25 * 1024 * 1024 then
                    ngx.status = 413
                    ngx.say("Audio file is too large")
                    ngx.log(ngx.ERR, "[upload] file too large: ", #data)
                    return
                end

                local upload_path = "/home/youngchan/Documents/speech-to-contract-ai/src/backend/uploads/audio/" .. uuid .. "." .. ext
                ngx.log(ngx.ERR, "[upload] Saving to: ", upload_path)
                local file = io.open(upload_path, "wb")
                if not file then
                    ngx.status = 500
                    ngx.say("Failed to open file for writing")
                    ngx.log(ngx.ERR, "[upload] Failed to open file for writing at: ", upload_path)
                    return
                end

                file:write(data)
                file:close()
                ngx.log(ngx.ERR, "[upload] Successfully wrote file")

                local http = require("resty.http")
                local httpc = http.new()
                local notify_url = "http://127.0.0.1:8000/transcription/uploaded-notify/" .. uuid
                ngx.log(ngx.ERR, "[upload] Sending callback to: ", notify_url)

                local res, err = httpc:request_uri(notify_url, {
                    method = "POST"
                })
                if not res then
                    ngx.status = 500
                    ngx.say("Callback request failed: " .. (err or "unknown"))
                    ngx.log(ngx.ERR, "[upload] Callback failed: ", err or "unknown")
                    return
                end

                if res.status ~= 202 then
                    ngx.status = 500
                    ngx.say("Callback responded with non-202 status: " .. res.status)
                    ngx.log(ngx.ERR, "[upload] Callback responded with status: ", res.status)
                    return
                end

                ngx.status = 202
                ngx.say("Upload and notify succeeded")
                ngx.log(ngx.ERR, "[upload] Upload and notify succeeded")
            }

        }
    }
}