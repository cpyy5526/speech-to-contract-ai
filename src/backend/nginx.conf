worker_processes  1;

events {
    worker_connections  1024;
}

http {
    daemon off;
    
    server {
        listen 8080;
        server_name localhost;

        client_max_body_size 25M;

        location ~ ^/upload/audio/(?<uuid>[a-zA-Z0-9\-]+)$ {
            content_by_lua_block {
                local uuid = ngx.var.uuid
                if not uuid or uuid == "" then
                    ngx.status = 400
                    ngx.say("Invalid or expired upload_url")
                    return
                end

                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                    ngx.status = 400
                    ngx.say("Invalid or missing body data")
                    return
                end

                if #data > 25 * 1024 * 1024 then
                    ngx.status = 413
                    ngx.say("Audio file is too large")
                    return
                end

                local upload_path = "/Users/kms/Desktop/src/backend/uploads/audio/" .. uuid
                local file = io.open(upload_path, "wb")
                if not file then
                    ngx.status = 500
                    ngx.say("Failed to open file for writing")
                    return
                end
                file:write(data)
                file:close()

                local http = require("resty.http")
                local httpc = http.new()
                local res, err = httpc:request_uri("http://localhost:8000/transcription/uploaded-notify/" .. uuid, {
                    method = "POST"
                })
                if not res then
                    ngx.status = 500
                    ngx.say("Callback request failed: " .. (err or "unknown"))
                    return
                end

                ngx.status = 202
                ngx.say("Upload and notify succeeded")
            }
        }
    }
}